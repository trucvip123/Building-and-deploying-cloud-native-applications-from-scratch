az --version
az login

# Create a Resource Group
az group create --name MyResourceGroup --location eastus
# Delete the Resource Group
az group delete --name TrucnvFunctionApp --yes --no-wait 
# Verify the Creation
az group list --output table

# Create a Storage Account
az storage account create --resource-group MyResourceGroup --name trucnvstorage --location eastus --sku Standard_LRS
# Verify the Creation
az storage account list --resource-group MyResourceGroup --output table

# Create an Azure Function App
az functionapp create --resource-group MyResourceGroup --name TrucnvFunctionApp --storage-account trucnvstorage --consumption-plan-location eastus --runtime python --os-type Linux --functions-version 4
# Verify the Creation
az functionapp list --resource-group MyResourceGroup --output table

# Create a Cosmos DB Account
az cosmosdb create --resource-group MyResourceGroup --name trucnvcosmosdb --kind MongoDB --locations "East US=0" --default-consistency-level "Eventual"
# Delete the CosmosDB
az cosmosdb delete --resource-group MyResourceGroup --name trucnvcosmosdb --yes
# Verify the list CosmosDB
az cosmosdb list --output table
# Retrieve Connection String
az cosmosdb keys list --resource-group MyResourceGroup --name trucnvcosmosdb --type connection-strings
# Create Collections in Mongo shell:
use dbo
db.createCollection('advertisements')
db.createCollection('posts')
show collections

# [Optional] Run the App locally
# Create a virtual environment in the local
pip install pipenv==2022.1.8
# Install packages into the pipenv virtual environment and generates the Pipfile.lock with a specific set of the packages
pipenv install --python 3.8
# Activate the new virtual environment
pipenv shell
python3 -m pip install -r requirements.txt
# Start the function. Port is optional to mention
func start [-p 7071]

# Deploy
func azure functionapp publish TrucnvFunctionApp


# Build web app flask
az webapp up --sku F1 -n trucnvWebApp --resource-group MyResourceGroup --location eastus --runtime "PYTHON|3.8"

#### JUST CHECK LOCAL####
# Build the image using the Dockerfile
docker build -t mywebapp:v1 .
# Once your image is ready on your local machine, you can test the application.
docker run -p 7071:7071 -it mywebapp:v1
###############

# Create an Azure Container Registry
az acr create --name trucnvacr --resource-group MyResourceGroup --sku Basic
# Log in to the Azure Container Registry
az acr login -n trucnvacr
# List the containerRegistry
az acr show --name trucnvacr --query loginServer --output table

# List the local images
docker images
docker tag mywebapp:v1 trucnvacr.azurecr.io/mywebapp:v1

# Use those credentials to login from your terminal. 
docker login trucnvacr.azurecr.io
docker push trucnvacr.azurecr.io/mywebapp:v1
# View the newly pushed image in the ACR respository
az acr repository list --name trucnvacr --output table


# Create an Azure Kubernetes cluster
az aks create --name trucnvCluster --resource-group MyResourceGroup --node-count 2 --generate-ssh-keys --attach-acr trucnvacr --location eastus

# Get credentials for your container service
az aks get-credentials --name trucnvCluster --resource-group MyResourceGroup

# Make sure Docker Desktop is running
kubectl version --client

# Get External IPs of all AKS cluster nodes 
kubectl get nodes
# Build the image and deploy the Function to Kubernetes:
func kubernetes deploy --name trucnvaks --registry trucnvacr.azurecr.io --dry-run > deploy.yml
